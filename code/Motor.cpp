#include "ADC.h"
#include "Allegro.h"
#include "Constants.h"
#include "Microprocessor.h"
#include "Motor.h"
#include "RTOS.h"

#include <stdlib.h>

Motor *Motor::_instance;

struct Entry
{
    //S32 index;

    S32 hall_a;

    S32 hall_b;

    Allegro::CurrentPoint current;
};

static Entry TABLE[] =
{
    {+797, +216, { +0, +54, +54}},
    {+798, +217, { +0, +54, +54}},
    {+839, +226, { +1, +55, +53}},
    {+841, +227, { +2, +55, +53}},
    {+846, +228, { +3, +56, +52}},
    {+847, +228, { +3, +56, +52}},
    {+850, +230, { +4, +56, +52}},
    {+853, +230, { +5, +57, +51}},
    {+860, +233, { +6, +57, +51}},
    {+862, +233, { +6, +57, +50}},
    {+866, +234, { +7, +58, +50}},
    {+865, +233, { +8, +58, +49}},
    {+867, +234, { +9, +58, +49}},
    {+872, +236, {+10, +58, +48}},
    {+881, +239, {+10, +59, +48}},
    {+890, +242, {+11, +59, +47}},
    {+897, +245, {+12, +59, +47}},
    {+903, +246, {+13, +59, +46}},
    {+905, +247, {+13, +60, +46}},
    {+915, +250, {+14, +60, +45}},
    {+921, +252, {+15, +60, +45}},
    {+928, +255, {+16, +60, +44}},
    {+930, +256, {+16, +60, +44}},
    {+939, +261, {+17, +61, +43}},
    {+942, +260, {+18, +61, +43}},
    {+952, +264, {+19, +61, +42}},
    {+957, +268, {+19, +61, +41}},
    {+961, +268, {+20, +61, +41}},
    {+969, +273, {+21, +61, +40}},
    {+968, +274, {+21, +62, +40}},
    {+979, +277, {+22, +62, +39}},
    {+986, +282, {+23, +62, +38}},
    {+990, +284, {+24, +62, +38}},
    {+991, +287, {+24, +62, +37}},
    {+990, +288, {+25, +62, +37}},
    {+990, +292, {+26, +62, +36}},
    {+991, +296, {+26, +62, +35}},
    {+991, +297, {+27, +62, +35}},
    {+990, +304, {+28, +62, +34}},
    {+991, +308, {+29, +62, +33}},
    {+990, +308, {+29, +62, +33}},
    {+991, +315, {+30, +62, +32}},
    {+991, +320, {+31, +62, +31}},
    {+991, +322, {+31, +62, +31}},
    {+991, +327, {+32, +62, +30}},
    {+990, +334, {+33, +62, +29}},
    {+990, +334, {+33, +62, +29}},
    {+990, +334, {+34, +62, +28}},
    {+990, +345, {+35, +62, +27}},
    {+990, +345, {+35, +62, +27}},
    {+990, +352, {+36, +62, +26}},
    {+989, +355, {+36, +62, +25}},
    {+990, +360, {+37, +62, +25}},
    {+991, +368, {+38, +62, +24}},
    {+989, +370, {+38, +62, +23}},
    {+990, +379, {+39, +62, +22}},
    {+990, +379, {+39, +62, +22}},
    {+990, +387, {+40, +62, +21}},
    {+991, +396, {+41, +61, +20}},
    {+990, +396, {+41, +61, +20}},
    {+991, +403, {+42, +61, +19}},
    {+990, +408, {+42, +61, +18}},
    {+990, +416, {+43, +61, +17}},
    {+991, +417, {+43, +61, +17}},
    {+991, +424, {+44, +60, +16}},
    {+990, +432, {+45, +60, +15}},
    {+990, +438, {+45, +60, +14}},
    {+990, +441, {+46, +60, +14}},
    {+990, +448, {+46, +59, +13}},
    {+990, +455, {+47, +59, +12}},
    {+990, +460, {+47, +59, +11}},
    {+990, +464, {+48, +59, +11}},
    {+991, +471, {+48, +58, +10}},
    {+990, +480, {+49, +58,  +9}},
    {+990, +483, {+49, +58,  +8}},
    {+991, +491, {+50, +58,  +7}},
    {+991, +494, {+50, +57,  +7}},
    {+990, +500, {+51, +57,  +6}},
    {+991, +506, {+51, +57,  +5}},
    {+990, +513, {+51, +56,  +4}},
    {+991, +517, {+52, +56,  +4}},
    {+990, +522, {+52, +56,  +3}},
    {+990, +531, {+53, +55,  +2}},
    {+990, +534, {+53, +55,  +1}},
    {+990, +536, {+54, +55,  +1}},
    {+990, +575, {+54, +54,  +0}},
    {+990, +574, {+54, +54,  +0}},
    {+991, +588, {+55, +53,  -1}},
    {+991, +591, {+55, +53,  -2}},
    {+989, +591, {+55, +53,  -2}},
    {+991, +594, {+56, +52,  -3}},
    {+990, +600, {+56, +52,  -4}},
    {+990, +608, {+56, +51,  -5}},
    {+991, +615, {+57, +51,  -5}},
    {+992, +624, {+57, +50,  -6}},
    {+990, +629, {+57, +50,  -7}},
    {+990, +639, {+58, +49,  -8}},
    {+990, +639, {+58, +49,  -8}},
    {+990, +644, {+58, +49,  -9}},
    {+989, +653, {+59, +48, -10}},
    {+990, +658, {+59, +48, -11}},
    {+990, +665, {+59, +47, -12}},
    {+991, +666, {+59, +47, -12}},
    {+991, +676, {+60, +46, -13}},
    {+990, +682, {+60, +45, -14}},
    {+991, +688, {+60, +45, -15}},
    {+990, +689, {+60, +44, -15}},
    {+991, +694, {+60, +44, -16}},
    {+991, +705, {+61, +43, -17}},
    {+990, +709, {+61, +43, -18}},
    {+991, +713, {+61, +42, -18}},
    {+990, +716, {+61, +42, -19}},
    {+985, +724, {+61, +41, -20}},
    {+981, +727, {+61, +40, -20}},
    {+976, +731, {+62, +40, -21}},
    {+967, +739, {+62, +39, -22}},
    {+961, +743, {+62, +39, -23}},
    {+957, +745, {+62, +38, -23}},
    {+947, +753, {+62, +37, -24}},
    {+941, +756, {+62, +37, -25}},
    {+930, +763, {+62, +36, -26}},
    {+929, +764, {+62, +36, -26}},
    {+919, +770, {+62, +35, -27}},
    {+910, +776, {+62, +34, -28}},
    {+910, +775, {+62, +34, -28}},
    {+905, +777, {+62, +33, -29}},
    {+892, +784, {+62, +32, -30}},
    {+891, +784, {+62, +32, -30}},
    {+883, +788, {+63, +31, -31}},
    {+872, +794, {+62, +30, -32}},
    {+871, +794, {+62, +30, -32}},
    {+861, +796, {+62, +29, -33}},
    {+851, +802, {+62, +28, -34}},
    {+851, +803, {+62, +28, -34}},
    {+843, +806, {+62, +27, -35}},
    {+833, +809, {+62, +26, -36}},
    {+832, +810, {+62, +26, -36}},
    {+822, +813, {+62, +25, -37}},
    {+818, +815, {+62, +24, -37}},
    {+810, +817, {+62, +23, -38}},
    {+805, +819, {+62, +23, -39}},
    {+801, +820, {+62, +22, -39}},
    {+791, +822, {+62, +21, -40}},
    {+784, +824, {+61, +20, -40}},
    {+780, +825, {+61, +20, -41}},
    {+772, +828, {+61, +19, -42}},
    {+767, +829, {+61, +18, -42}},
    {+763, +829, {+61, +18, -43}},
    {+760, +830, {+61, +17, -43}},
    {+752, +832, {+60, +16, -44}},
    {+746, +833, {+60, +15, -44}},
    {+740, +834, {+60, +15, -45}},
    {+737, +835, {+60, +14, -45}},
    {+725, +836, {+60, +13, -46}},
    {+715, +838, {+59, +12, -47}},
    {+715, +838, {+59, +12, -47}},
    {+710, +839, {+59, +11, -48}},
    {+705, +839, {+59, +10, -48}},
    {+701, +840, {+58,  +9, -49}},
    {+696, +840, {+58,  +8, -49}},
    {+697, +840, {+58,  +8, -49}},
    {+691, +841, {+57,  +7, -50}},
    {+686, +840, {+57,  +6, -50}},
    {+686, +841, {+57,  +5, -51}},
    {+686, +841, {+56,  +5, -51}},
    {+677, +841, {+56,  +4, -52}},
    {+670, +842, {+56,  +3, -52}},
    {+660, +843, {+55,  +2, -53}},
    {+659, +842, {+55,  +2, -53}},
    {+656, +843, {+55,  +1, -53}},
    {+621, +840, {+54,  +0, -54}},
    {+620, +842, {+54,  +0, -54}},
    {+603, +843, {+54,  -1, -55}},
    {+601, +842, {+53,  -1, -55}},
    {+599, +842, {+53,  -2, -55}},
    {+591, +842, {+52,  -3, -56}},
    {+587, +842, {+52,  -4, -56}},
    {+585, +841, {+51,  -4, -56}},
    {+580, +842, {+51,  -5, -57}},
    {+575, +841, {+51,  -6, -57}},
    {+571, +840, {+50,  -7, -57}},
    {+568, +840, {+50,  -7, -58}},
    {+563, +839, {+49,  -8, -58}},
    {+559, +839, {+49,  -9, -58}},
    {+552, +838, {+48, -10, -58}},
    {+549, +839, {+48, -11, -59}},
    {+546, +838, {+47, -11, -59}},
    {+542, +838, {+47, -12, -59}},
    {+536, +838, {+46, -13, -59}},
    {+530, +837, {+46, -14, -60}},
    {+526, +837, {+45, -14, -60}},
    {+523, +836, {+45, -15, -60}},
    {+517, +836, {+44, -16, -60}},
    {+510, +834, {+43, -17, -61}},
    {+509, +834, {+43, -17, -61}},
    {+503, +831, {+42, -18, -61}},
    {+498, +833, {+42, -19, -61}},
    {+491, +833, {+41, -20, -61}},
    {+491, +832, {+41, -20, -61}},
    {+483, +831, {+40, -21, -62}},
    {+476, +828, {+39, -22, -62}},
    {+476, +830, {+39, -22, -62}},
    {+469, +829, {+38, -23, -62}},
    {+464, +828, {+38, -24, -62}},
    {+456, +827, {+37, -25, -62}},
    {+454, +827, {+36, -25, -62}},
    {+449, +826, {+36, -26, -62}},
    {+442, +825, {+35, -27, -62}},
    {+439, +824, {+35, -27, -62}},
    {+433, +823, {+34, -28, -62}},
    {+425, +822, {+33, -29, -62}},
    {+425, +822, {+33, -29, -62}},
    {+420, +822, {+32, -30, -62}},
    {+411, +820, {+31, -31, -62}},
    {+410, +821, {+31, -31, -62}},
    {+404, +820, {+30, -32, -62}},
    {+397, +818, {+29, -33, -62}},
    {+397, +818, {+29, -33, -62}},
    {+391, +817, {+28, -34, -62}},
    {+380, +816, {+27, -35, -62}},
    {+378, +815, {+26, -35, -62}},
    {+370, +814, {+26, -36, -62}},
    {+362, +813, {+25, -37, -62}},
    {+360, +812, {+24, -37, -62}},
    {+352, +811, {+24, -38, -62}},
    {+350, +811, {+23, -38, -62}},
    {+345, +810, {+22, -39, -62}},
    {+335, +808, {+21, -40, -62}},
    {+337, +809, {+21, -40, -61}},
    {+332, +807, {+20, -41, -61}},
    {+328, +807, {+19, -41, -61}},
    {+326, +807, {+19, -42, -61}},
    {+319, +805, {+18, -43, -61}},
    {+314, +804, {+17, -43, -61}},
    {+308, +803, {+16, -44, -60}},
    {+304, +803, {+16, -44, -60}},
    {+301, +802, {+15, -45, -60}},
    {+295, +800, {+14, -45, -60}},
    {+288, +799, {+13, -46, -60}},
    {+286, +800, {+13, -46, -59}},
    {+281, +798, {+12, -47, -59}},
    {+275, +797, {+11, -47, -59}},
    {+269, +796, {+10, -48, -59}},
    {+267, +796, {+10, -48, -58}},
    {+261, +795, { +9, -49, -58}},
    {+256, +794, { +8, -49, -58}},
    {+251, +795, { +7, -50, -58}},
    {+244, +791, { +6, -50, -57}},
    {+241, +791, { +6, -51, -57}},
    {+240, +790, { +5, -51, -57}},
    {+231, +787, { +4, -52, -56}},
    {+228, +788, { +3, -52, -56}},
    {+227, +787, { +3, -52, -56}},
    {+222, +787, { +2, -53, -55}},
    {+220, +786, { +1, -53, -55}},
    {+176, +777, { +0, -54, -54}},
    {+179, +777, { +0, -54, -54}},
    {+178, +776, { +0, -54, -54}},
    {+143, +767, { -1, -55, -53}},
    {+144, +767, { -2, -55, -53}},
    {+137, +766, { -3, -56, -52}},
    {+136, +767, { -3, -56, -52}},
    {+135, +766, { -4, -56, -52}},
    {+127, +763, { -5, -57, -51}},
    {+121, +761, { -6, -57, -51}},
    {+122, +761, { -6, -57, -50}},
    {+115, +760, { -7, -58, -50}},
    {+109, +756, { -8, -58, -49}},
    {+104, +756, { -9, -58, -49}},
    {+100, +754, {-10, -58, -48}},
    { +99, +753, {-10, -59, -48}},
    { +95, +752, {-11, -59, -47}},
    { +96, +753, {-12, -59, -47}},
    { +80, +747, {-13, -59, -46}},
    { +78, +746, {-13, -60, -46}},
    { +70, +743, {-14, -60, -45}},
    { +64, +741, {-15, -60, -45}},
    { +57, +738, {-16, -60, -44}},
    { +56, +737, {-16, -60, -44}},
    { +47, +733, {-17, -61, -43}},
    { +44, +731, {-18, -61, -43}},
    { +36, +727, {-19, -61, -42}},
    { +36, +725, {-19, -61, -41}},
    { +32, +723, {-20, -61, -41}},
    { +30, +718, {-21, -61, -40}},
    { +30, +717, {-21, -62, -40}},
    { +30, +714, {-22, -62, -39}},
    { +32, +708, {-23, -62, -38}},
    { +29, +707, {-24, -62, -38}},
    { +29, +704, {-24, -62, -37}},
    { +29, +702, {-25, -62, -37}},
    { +29, +696, {-26, -62, -36}},
    { +29, +693, {-26, -62, -35}},
    { +28, +691, {-27, -62, -35}},
    { +29, +686, {-28, -62, -34}},
    { +29, +680, {-29, -62, -33}},
    { +28, +681, {-29, -62, -33}},
    { +28, +674, {-30, -62, -32}},
    { +29, +668, {-31, -62, -31}},
    { +28, +667, {-31, -62, -31}},
    { +28, +659, {-32, -62, -30}},
    { +28, +654, {-33, -62, -29}},
    { +28, +653, {-33, -62, -29}},
    { +28, +652, {-34, -62, -28}},
    { +29, +642, {-35, -62, -27}},
    { +28, +642, {-35, -62, -27}},
    { +28, +635, {-36, -62, -26}},
    { +28, +630, {-36, -62, -25}},
    { +28, +627, {-37, -62, -25}},
    { +28, +619, {-38, -62, -24}},
    { +28, +615, {-38, -62, -23}},
    { +29, +606, {-39, -62, -22}},
    { +29, +606, {-39, -62, -22}},
    { +28, +598, {-40, -62, -21}},
    { +28, +588, {-41, -61, -20}},
    { +28, +588, {-41, -61, -20}},
    { +28, +581, {-42, -61, -19}},
    { +26, +574, {-42, -61, -18}},
    { +29, +566, {-43, -61, -17}},
    { +28, +565, {-43, -61, -17}},
    { +28, +558, {-44, -60, -16}},
    { +28, +550, {-45, -60, -15}},
    { +28, +541, {-45, -60, -14}},
    { +28, +541, {-46, -60, -14}},
    { +27, +534, {-46, -59, -13}},
    { +28, +526, {-47, -59, -12}},
    { +28, +520, {-47, -59, -11}},
    { +28, +518, {-48, -59, -11}},
    { +28, +512, {-48, -58, -10}},
    { +28, +502, {-49, -58,  -9}},
    { +28, +497, {-49, -58,  -8}},
    { +28, +490, {-50, -58,  -7}},
    { +28, +487, {-50, -57,  -7}},
    { +28, +481, {-51, -57,  -6}},
    { +28, +475, {-51, -57,  -5}},
    { +29, +468, {-51, -56,  -4}},
    { +28, +464, {-52, -56,  -4}},
    { +29, +460, {-52, -56,  -3}},
    { +28, +449, {-53, -55,  -2}},
    { +28, +445, {-53, -55,  -1}},
    { +27, +442, {-54, -55,  -1}},
    { +28, +408, {-54, -54,  +0}},
    { +28, +407, {-54, -54,  +0}},
    { +28, +393, {-55, -53,  +1}},
    { +27, +391, {-55, -53,  +2}},
    { +28, +389, {-55, -53,  +2}},
    { +28, +385, {-56, -52,  +3}},
    { +28, +381, {-56, -52,  +4}},
    { +28, +374, {-56, -51,  +5}},
    { +28, +367, {-57, -51,  +5}},
    { +28, +359, {-57, -50,  +6}},
    { +28, +355, {-57, -50,  +7}},
    { +28, +344, {-58, -49,  +8}},
    { +29, +345, {-58, -49,  +8}},
    { +29, +340, {-58, -49,  +9}},
    { +28, +331, {-59, -48, +10}},
    { +29, +327, {-59, -48, +11}},
    { +29, +318, {-59, -47, +12}},
    { +29, +317, {-59, -47, +12}},
    { +28, +309, {-60, -46, +13}},
    { +29, +302, {-60, -45, +14}},
    { +28, +297, {-60, -45, +15}},
    { +28, +295, {-60, -44, +15}},
    { +29, +290, {-60, -44, +16}},
    { +30, +280, {-61, -43, +17}},
    { +29, +276, {-61, -43, +18}},
    { +29, +273, {-61, -42, +18}},
    { +30, +270, {-61, -42, +19}},
    { +32, +263, {-61, -41, +20}},
    { +33, +261, {-61, -40, +20}},
    { +36, +256, {-62, -40, +21}},
    { +41, +248, {-62, -39, +22}},
    { +47, +245, {-62, -39, +23}},
    { +50, +242, {-62, -38, +23}},
    { +62, +235, {-62, -37, +24}},
    { +66, +231, {-62, -37, +25}},
    { +76, +225, {-62, -36, +26}},
    { +77, +224, {-62, -36, +26}},
    { +91, +216, {-62, -35, +27}},
    { +98, +212, {-62, -34, +28}},
    {+100, +212, {-62, -34, +28}},
    {+102, +211, {-62, -33, +29}},
    {+112, +207, {-62, -32, +30}},
    {+113, +205, {-62, -32, +30}},
    {+123, +201, {-63, -31, +31}},
    {+133, +197, {-62, -30, +32}},
    {+135, +197, {-62, -30, +32}},
    {+143, +194, {-62, -29, +33}},
    {+150, +189, {-62, -28, +34}},
    {+153, +189, {-62, -28, +34}},
    {+162, +183, {-62, -27, +35}},
    {+171, +182, {-62, -26, +36}},
    {+173, +182, {-62, -26, +36}},
    {+181, +179, {-62, -25, +37}},
    {+187, +178, {-62, -24, +37}},
    {+196, +177, {-62, -23, +38}},
    {+197, +176, {-62, -23, +39}},
    {+203, +174, {-62, -22, +39}},
    {+211, +172, {-62, -21, +40}},
    {+218, +170, {-61, -20, +40}},
    {+221, +170, {-61, -20, +41}},
    {+229, +167, {-61, -19, +42}},
    {+233, +167, {-61, -18, +42}},
    {+235, +166, {-61, -18, +43}},
    {+239, +166, {-61, -17, +43}},
    {+248, +164, {-60, -16, +44}},
    {+254, +163, {-60, -15, +44}},
    {+258, +163, {-60, -15, +45}},
    {+263, +162, {-60, -14, +45}},
    {+274, +160, {-60, -13, +46}},
    {+286, +160, {-59, -12, +47}},
    {+286, +160, {-59, -12, +47}},
    {+294, +159, {-59, -11, +48}},
    {+298, +158, {-59, -10, +48}},
    {+305, +158, {-58,  -9, +49}},
    {+306, +158, {-58,  -8, +49}},
    {+308, +158, {-58,  -8, +49}},
    {+312, +158, {-57,  -7, +50}},
    {+315, +158, {-57,  -6, +50}},
    {+319, +157, {-57,  -5, +51}},
    {+322, +157, {-56,  -5, +51}},
    {+322, +158, {-56,  -4, +52}},
    {+326, +157, {-56,  -3, +52}},
    {+339, +157, {-55,  -2, +53}},
    {+339, +156, {-55,  -2, +53}},
    {+343, +158, {-55,  -1, +53}},
    {+378, +157, {-54,  +0, +54}},
    {+378, +157, {-54,  +0, +54}},
    {+393, +158, {-54,  +1, +55}},
    {+394, +159, {-53,  +1, +55}},
    {+396, +158, {-53,  +2, +55}},
    {+405, +159, {-52,  +3, +56}},
    {+409, +159, {-52,  +4, +56}},
    {+410, +159, {-51,  +4, +56}},
    {+414, +159, {-51,  +5, +57}},
    {+420, +160, {-51,  +6, +57}},
    {+423, +162, {-50,  +7, +57}},
    {+425, +161, {-50,  +7, +58}},
    {+432, +161, {-49,  +8, +58}},
    {+437, +161, {-49,  +9, +58}},
    {+441, +162, {-48, +10, +58}},
    {+446, +163, {-48, +11, +59}},
    {+451, +163, {-47, +11, +59}},
    {+455, +164, {-47, +12, +59}},
    {+460, +164, {-46, +13, +59}},
    {+464, +165, {-46, +14, +60}},
    {+465, +165, {-45, +14, +60}},
    {+468, +165, {-45, +15, +60}},
    {+476, +167, {-44, +16, +60}},
    {+486, +167, {-43, +17, +61}},
    {+485, +167, {-43, +17, +61}},
    {+489, +167, {-42, +18, +61}},
    {+494, +168, {-42, +19, +61}},
    {+501, +169, {-41, +20, +61}},
    {+501, +168, {-41, +20, +61}},
    {+508, +170, {-40, +21, +62}},
    {+517, +171, {-39, +22, +62}},
    {+517, +171, {-39, +22, +62}},
    {+523, +172, {-38, +23, +62}},
    {+528, +172, {-38, +24, +62}},
    {+534, +173, {-37, +25, +62}},
    {+539, +174, {-36, +25, +62}},
    {+542, +174, {-36, +26, +62}},
    {+551, +176, {-35, +27, +62}},
    {+551, +176, {-35, +27, +62}},
    {+559, +177, {-34, +28, +62}},
    {+567, +178, {-33, +29, +62}},
    {+566, +178, {-33, +29, +62}},
    {+572, +179, {-32, +30, +62}},
    {+578, +179, {-31, +31, +62}},
    {+579, +179, {-31, +31, +62}},
    {+587, +182, {-30, +32, +62}},
    {+594, +182, {-29, +33, +62}},
    {+595, +182, {-29, +33, +62}},
    {+601, +183, {-28, +34, +62}},
    {+610, +185, {-27, +35, +62}},
    {+611, +186, {-26, +35, +62}},
    {+615, +185, {-26, +36, +62}},
    {+624, +187, {-25, +37, +62}},
    {+627, +188, {-24, +37, +62}},
    {+633, +189, {-24, +38, +62}},
    {+636, +189, {-23, +38, +62}},
    {+646, +191, {-22, +39, +62}},
    {+654, +192, {-21, +40, +62}},
    {+653, +192, {-21, +40, +61}},
    {+659, +193, {-20, +41, +61}},
    {+663, +194, {-19, +41, +61}},
    {+666, +193, {-19, +42, +61}},
    {+675, +197, {-18, +43, +61}},
    {+678, +196, {-17, +43, +61}},
    {+684, +197, {-16, +44, +60}},
    {+686, +198, {-16, +44, +60}},
    {+692, +199, {-15, +45, +60}},
    {+696, +200, {-14, +45, +60}},
    {+702, +200, {-13, +46, +60}},
    {+705, +201, {-13, +46, +59}},
    {+711, +201, {-12, +47, +59}},
    {+715, +203, {-11, +47, +59}},
    {+717, +204, {-10, +48, +59}},
    {+726, +205, {-10, +48, +58}},
    {+730, +206, { -9, +49, +58}},
    {+731, +206, { -8, +49, +58}},
    {+737, +208, { -7, +50, +58}},
    {+741, +208, { -6, +50, +57}},
    {+743, +208, { -6, +51, +57}},
    {+749, +210, { -5, +51, +57}},
    {+756, +211, { -4, +52, +56}},
    {+760, +212, { -3, +52, +56}},
    {+762, +213, { -3, +52, +56}},
    {+770, +214, { -2, +53, +55}},
    {+770, +216, { -1, +53, +55}},
    {+817, +226, { +0, +54, +54}}
};




struct NewEntry
{
    S32 index;

    S32 hall_a;

    S32 hall_b;

    Allegro::CurrentPoint current;
};

static NewEntry NewTABLE[] =
{
{+424,+339,+156,{-55,-2,+53}},
{+419,+319,+157,{-57,-5,+51}},
{+423,+339,+157,{-55,-2,+53}},
{+420,+322,+157,{-56,-5,+51}},
{+426,+378,+157,{-54,0,+54}},
{+422,+326,+157,{-56,-3,+52}},
{+427,+378,+157,{-54,0,+54}},
{+417,+312,+158,{-57,-7,+50}},
{+418,+315,+158,{-57,-6,+50}},
{+430,+396,+158,{-53,+2,+55}},
{+428,+393,+158,{-54,+1,+55}},
{+425,+343,+158,{-55,-1,+53}},
{+421,+322,+158,{-56,-4,+52}},
{+414,+305,+158,{-58,-9,+49}},
{+413,+298,+158,{-59,-10,+48}},
{+416,+308,+158,{-58,-8,+49}},
{+415,+306,+158,{-58,-8,+49}},
{+431,+405,+159,{-52,+3,+56}},
{+429,+394,+159,{-53,+1,+55}},
{+432,+409,+159,{-52,+4,+56}},
{+434,+414,+159,{-51,+5,+57}},
{+433,+410,+159,{-51,+4,+56}},
{+412,+294,+159,{-59,-11,+48}},
{+435,+420,+160,{-51,+6,+57}},
{+409,+274,+160,{-60,-13,+46}},
{+410,+286,+160,{-59,-12,+47}},
{+411,+286,+160,{-59,-12,+47}},
{+437,+425,+161,{-50,+7,+58}},
{+438,+432,+161,{-49,+8,+58}},
{+439,+437,+161,{-49,+9,+58}},
{+440,+441,+162,{-48,+10,+58}},
{+436,+423,+162,{-50,+7,+57}},
{+408,+263,+162,{-60,-14,+45}},
{+407,+258,+163,{-60,-15,+45}},
{+441,+446,+163,{-48,+11,+59}},
{+406,+254,+163,{-60,-15,+44}},
{+442,+451,+163,{-47,+11,+59}},
{+443,+455,+164,{-47,+12,+59}},
{+405,+248,+164,{-60,-16,+44}},
{+444,+460,+164,{-46,+13,+59}},
{+447,+468,+165,{-45,+15,+60}},
{+446,+465,+165,{-45,+14,+60}},
{+445,+464,+165,{-46,+14,+60}},
{+403,+235,+166,{-61,-18,+43}},
{+404,+239,+166,{-61,-17,+43}},
{+449,+486,+167,{-43,+17,+61}},
{+450,+485,+167,{-43,+17,+61}},
{+451,+489,+167,{-42,+18,+61}},
{+401,+229,+167,{-61,-19,+42}},
{+402,+233,+167,{-61,-18,+42}},
{+448,+476,+167,{-44,+16,+60}},
{+454,+501,+168,{-41,+20,+61}},
{+452,+494,+168,{-42,+19,+61}},
{+453,+501,+169,{-41,+20,+61}},
{+455,+508,+170,{-40,+21,+62}},
{+400,+221,+170,{-61,-20,+41}},
{+399,+218,+170,{-61,-20,+40}},
{+457,+517,+171,{-39,+22,+62}},
{+456,+517,+171,{-39,+22,+62}},
{+398,+211,+172,{-62,-21,+40}},
{+458,+523,+172,{-38,+23,+62}},
{+459,+528,+172,{-38,+24,+62}},
{+460,+534,+173,{-37,+25,+62}},
{+462,+542,+174,{-36,+26,+62}},
{+461,+539,+174,{-36,+25,+62}},
{+397,+203,+174,{-62,-22,+39}},
{+396,+197,+176,{-62,-23,+39}},
{+463,+551,+176,{-35,+27,+62}},
{+464,+551,+176,{-35,+27,+62}},
{+395,+196,+177,{-62,-23,+38}},
{+465,+559,+177,{-34,+28,+62}},
{+394,+187,+178,{-62,-24,+37}},
{+466,+567,+178,{-33,+29,+62}},
{+467,+566,+178,{-33,+29,+62}},
{+393,+181,+179,{-62,-25,+37}},
{+470,+579,+179,{-31,+31,+62}},
{+468,+572,+179,{-32,+30,+62}},
{+469,+578,+179,{-31,+31,+62}},
{+392,+173,+182,{-62,-26,+36}},
{+391,+171,+182,{-62,-26,+36}},
{+473,+595,+182,{-29,+33,+62}},
{+471,+587,+182,{-30,+32,+62}},
{+472,+594,+182,{-29,+33,+62}},
{+474,+601,+183,{-28,+34,+62}},
{+390,+162,+183,{-62,-27,+35}},
{+475,+610,+185,{-27,+35,+62}},
{+477,+615,+185,{-26,+36,+62}},
{+476,+611,+186,{-26,+35,+62}},
{+478,+624,+187,{-25,+37,+62}},
{+479,+627,+188,{-24,+37,+62}},
{+389,+153,+189,{-62,-28,+34}},
{+481,+636,+189,{-23,+38,+62}},
{+480,+633,+189,{-24,+38,+62}},
{+388,+150,+189,{-62,-28,+34}},
{+482,+646,+191,{-22,+39,+62}},
{+483,+654,+192,{-21,+40,+62}},
{+484,+653,+192,{-21,+40,+61}},
{+485,+659,+193,{-20,+41,+61}},
{+487,+666,+193,{-19,+42,+61}},
{+387,+143,+194,{-62,-29,+33}},
{+486,+663,+194,{-19,+41,+61}},
{+489,+678,+196,{-17,+43,+61}},
{+490,+684,+197,{-16,+44,+60}},
{+488,+675,+197,{-18,+43,+61}},
{+385,+133,+197,{-62,-30,+32}},
{+386,+135,+197,{-62,-30,+32}},
{+491,+686,+198,{-16,+44,+60}},
{+492,+692,+199,{-15,+45,+60}},
{+494,+702,+200,{-13,+46,+60}},
{+493,+696,+200,{-14,+45,+60}},
{+495,+705,+201,{-13,+46,+59}},
{+496,+711,+201,{-12,+47,+59}},
{+384,+123,+201,{-63,-31,+31}},
{+497,+715,+203,{-11,+47,+59}},
{+498,+717,+204,{-10,+48,+59}},
{+499,+726,+205,{-10,+48,+58}},
{+383,+113,+205,{-62,-32,+30}},
{+500,+730,+206,{-9,+49,+58}},
{+501,+731,+206,{-8,+49,+58}},
{+382,+112,+207,{-62,-32,+30}},
{+503,+741,+208,{-6,+50,+57}},
{+502,+737,+208,{-7,+50,+58}},
{+504,+743,+208,{-6,+51,+57}},
{+505,+749,+210,{-5,+51,+57}},
{+506,+756,+211,{-4,+52,+56}},
{+381,+102,+211,{-62,-33,+29}},
{+379,+98,+212,{-62,-34,+28}},
{+380,+100,+212,{-62,-34,+28}},
{+507,+760,+212,{-3,+52,+56}},
{+508,+762,+213,{-3,+52,+56}},
{+509,+770,+214,{-2,+53,+55}},
{+378,+91,+216,{-62,-35,+27}},
{+510,+770,+216,{-1,+53,+55}},
{0,+797,+216,{0,+54,+54}},
{+1,+798,+217,{0,+54,+54}},
{+377,+77,+224,{-62,-36,+26}},
{+376,+76,+225,{-62,-36,+26}},
{+511,+817,+226,{0,+54,+54}},
{+2,+839,+226,{+1,+55,+53}},
{+3,+841,+227,{+2,+55,+53}},
{+5,+847,+228,{+3,+56,+52}},
{+4,+846,+228,{+3,+56,+52}},
{+6,+850,+230,{+4,+56,+52}},
{+7,+853,+230,{+5,+57,+51}},
{+375,+66,+231,{-62,-37,+25}},
{+11,+865,+233,{+8,+58,+49}},
{+9,+862,+233,{+6,+57,+50}},
{+8,+860,+233,{+6,+57,+51}},
{+12,+867,+234,{+9,+58,+49}},
{+10,+866,+234,{+7,+58,+50}},
{+374,+62,+235,{-62,-37,+24}},
{+13,+872,+236,{+10,+58,+48}},
{+14,+881,+239,{+10,+59,+48}},
{+373,+50,+242,{-62,-38,+23}},
{+15,+890,+242,{+11,+59,+47}},
{+372,+47,+245,{-62,-39,+23}},
{+16,+897,+245,{+12,+59,+47}},
{+17,+903,+246,{+13,+59,+46}},
{+18,+905,+247,{+13,+60,+46}},
{+371,+41,+248,{-62,-39,+22}},
{+19,+915,+250,{+14,+60,+45}},
{+20,+921,+252,{+15,+60,+45}},
{+21,+928,+255,{+16,+60,+44}},
{+22,+930,+256,{+16,+60,+44}},
{+370,+36,+256,{-62,-40,+21}},
{+24,+942,+260,{+18,+61,+43}},
{+369,+33,+261,{-61,-40,+20}},
{+23,+939,+261,{+17,+61,+43}},
{+368,+32,+263,{-61,-41,+20}},
{+25,+952,+264,{+19,+61,+42}},
{+26,+957,+268,{+19,+61,+41}},
{+27,+961,+268,{+20,+61,+41}},
{+367,+30,+270,{-61,-42,+19}},
{+28,+969,+273,{+21,+61,+40}},
{+366,+29,+273,{-61,-42,+18}},
{+29,+968,+274,{+21,+62,+40}},
{+365,+29,+276,{-61,-43,+18}},
{+30,+979,+277,{+22,+62,+39}},
{+364,+30,+280,{-61,-43,+17}},
{+31,+986,+282,{+23,+62,+38}},
{+32,+990,+284,{+24,+62,+38}},
{+33,+991,+287,{+24,+62,+37}},
{+34,+990,+288,{+25,+62,+37}},
{+363,+29,+290,{-60,-44,+16}},
{+35,+990,+292,{+26,+62,+36}},
{+362,+28,+295,{-60,-44,+15}},
{+36,+991,+296,{+26,+62,+35}},
{+37,+991,+297,{+27,+62,+35}},
{+361,+28,+297,{-60,-45,+15}},
{+360,+29,+302,{-60,-45,+14}},
{+38,+990,+304,{+28,+62,+34}},
{+40,+990,+308,{+29,+62,+33}},
{+39,+991,+308,{+29,+62,+33}},
{+359,+28,+309,{-60,-46,+13}},
{+41,+991,+315,{+30,+62,+32}},
{+358,+29,+317,{-59,-47,+12}},
{+357,+29,+318,{-59,-47,+12}},
{+42,+991,+320,{+31,+62,+31}},
{+43,+991,+322,{+31,+62,+31}},
{+356,+29,+327,{-59,-48,+11}},
{+44,+991,+327,{+32,+62,+30}},
{+355,+28,+331,{-59,-48,+10}},
{+47,+990,+334,{+34,+62,+28}},
{+46,+990,+334,{+33,+62,+29}},
{+45,+990,+334,{+33,+62,+29}},
{+354,+29,+340,{-58,-49,+9}},
{+352,+28,+344,{-58,-49,+8}},
{+353,+29,+345,{-58,-49,+8}},
{+48,+990,+345,{+35,+62,+27}},
{+49,+990,+345,{+35,+62,+27}},
{+50,+990,+352,{+36,+62,+26}},
{+51,+989,+355,{+36,+62,+25}},
{+351,+28,+355,{-57,-50,+7}},
{+350,+28,+359,{-57,-50,+6}},
{+52,+990,+360,{+37,+62,+25}},
{+349,+28,+367,{-57,-51,+5}},
{+53,+991,+368,{+38,+62,+24}},
{+54,+989,+370,{+38,+62,+23}},
{+348,+28,+374,{-56,-51,+5}},
{+55,+990,+379,{+39,+62,+22}},
{+56,+990,+379,{+39,+62,+22}},
{+347,+28,+381,{-56,-52,+4}},
{+346,+28,+385,{-56,-52,+3}},
{+57,+990,+387,{+40,+62,+21}},
{+345,+28,+389,{-55,-53,+2}},
{+344,+27,+391,{-55,-53,+2}},
{+343,+28,+393,{-55,-53,+1}},
{+59,+990,+396,{+41,+61,+20}},
{+58,+991,+396,{+41,+61,+20}},
{+60,+991,+403,{+42,+61,+19}},
{+342,+28,+407,{-54,-54,0}},
{+61,+990,+408,{+42,+61,+18}},
{+341,+28,+408,{-54,-54,0}},
{+62,+990,+416,{+43,+61,+17}},
{+63,+991,+417,{+43,+61,+17}},
{+64,+991,+424,{+44,+60,+16}},
{+65,+990,+432,{+45,+60,+15}},
{+66,+990,+438,{+45,+60,+14}},
{+67,+990,+441,{+46,+60,+14}},
{+340,+27,+442,{-54,-55,-1}},
{+339,+28,+445,{-53,-55,-1}},
{+68,+990,+448,{+46,+59,+13}},
{+338,+28,+449,{-53,-55,-2}},
{+69,+990,+455,{+47,+59,+12}},
{+70,+990,+460,{+47,+59,+11}},
{+337,+29,+460,{-52,-56,-3}},
{+71,+990,+464,{+48,+59,+11}},
{+336,+28,+464,{-52,-56,-4}},
{+335,+29,+468,{-51,-56,-4}},
{+72,+991,+471,{+48,+58,+10}},
{+334,+28,+475,{-51,-57,-5}},
{+73,+990,+480,{+49,+58,+9}},
{+333,+28,+481,{-51,-57,-6}},
{+74,+990,+483,{+49,+58,+8}},
{+332,+28,+487,{-50,-57,-7}},
{+331,+28,+490,{-50,-58,-7}},
{+75,+991,+491,{+50,+58,+7}},
{+76,+991,+494,{+50,+57,+7}},
{+330,+28,+497,{-49,-58,-8}},
{+77,+990,+500,{+51,+57,+6}},
{+329,+28,+502,{-49,-58,-9}},
{+78,+991,+506,{+51,+57,+5}},
{+328,+28,+512,{-48,-58,-10}},
{+79,+990,+513,{+51,+56,+4}},
{+80,+991,+517,{+52,+56,+4}},
{+327,+28,+518,{-48,-59,-11}},
{+326,+28,+520,{-47,-59,-11}},
{+81,+990,+522,{+52,+56,+3}},
{+325,+28,+526,{-47,-59,-12}},
{+82,+990,+531,{+53,+55,+2}},
{+324,+27,+534,{-46,-59,-13}},
{+83,+990,+534,{+53,+55,+1}},
{+84,+990,+536,{+54,+55,+1}},
{+322,+28,+541,{-45,-60,-14}},
{+323,+28,+541,{-46,-60,-14}},
{+321,+28,+550,{-45,-60,-15}},
{+320,+28,+558,{-44,-60,-16}},
{+319,+28,+565,{-43,-61,-17}},
{+318,+29,+566,{-43,-61,-17}},
{+317,+26,+574,{-42,-61,-18}},
{+86,+990,+574,{+54,+54,0}},
{+85,+990,+575,{+54,+54,0}},
{+316,+28,+581,{-42,-61,-19}},
{+314,+28,+588,{-41,-61,-20}},
{+315,+28,+588,{-41,-61,-20}},
{+87,+991,+588,{+55,+53,-1}},
{+88,+991,+591,{+55,+53,-2}},
{+89,+989,+591,{+55,+53,-2}},
{+90,+991,+594,{+56,+52,-3}},
{+313,+28,+598,{-40,-62,-21}},
{+91,+990,+600,{+56,+52,-4}},
{+312,+29,+606,{-39,-62,-22}},
{+311,+29,+606,{-39,-62,-22}},
{+92,+990,+608,{+56,+51,-5}},
{+93,+991,+615,{+57,+51,-5}},
{+310,+28,+615,{-38,-62,-23}},
{+309,+28,+619,{-38,-62,-24}},
{+94,+992,+624,{+57,+50,-6}},
{+308,+28,+627,{-37,-62,-25}},
{+95,+990,+629,{+57,+50,-7}},
{+307,+28,+630,{-36,-62,-25}},
{+306,+28,+635,{-36,-62,-26}},
{+97,+990,+639,{+58,+49,-8}},
{+96,+990,+639,{+58,+49,-8}},
{+305,+28,+642,{-35,-62,-27}},
{+304,+29,+642,{-35,-62,-27}},
{+98,+990,+644,{+58,+49,-9}},
{+303,+28,+652,{-34,-62,-28}},
{+99,+989,+653,{+59,+48,-10}},
{+302,+28,+653,{-33,-62,-29}},
{+301,+28,+654,{-33,-62,-29}},
{+100,+990,+658,{+59,+48,-11}},
{+300,+28,+659,{-32,-62,-30}},
{+101,+990,+665,{+59,+47,-12}},
{+102,+991,+666,{+59,+47,-12}},
{+299,+28,+667,{-31,-62,-31}},
{+298,+29,+668,{-31,-62,-31}},
{+297,+28,+674,{-30,-62,-32}},
{+103,+991,+676,{+60,+46,-13}},
{+295,+29,+680,{-29,-62,-33}},
{+296,+28,+681,{-29,-62,-33}},
{+104,+990,+682,{+60,+45,-14}},
{+294,+29,+686,{-28,-62,-34}},
{+105,+991,+688,{+60,+45,-15}},
{+106,+990,+689,{+60,+44,-15}},
{+293,+28,+691,{-27,-62,-35}},
{+292,+29,+693,{-26,-62,-35}},
{+107,+991,+694,{+60,+44,-16}},
{+291,+29,+696,{-26,-62,-36}},
{+290,+29,+702,{-25,-62,-37}},
{+289,+29,+704,{-24,-62,-37}},
{+108,+991,+705,{+61,+43,-17}},
{+288,+29,+707,{-24,-62,-38}},
{+287,+32,+708,{-23,-62,-38}},
{+109,+990,+709,{+61,+43,-18}},
{+110,+991,+713,{+61,+42,-18}},
{+286,+30,+714,{-22,-62,-39}},
{+111,+990,+716,{+61,+42,-19}},
{+285,+30,+717,{-21,-62,-40}},
{+284,+30,+718,{-21,-61,-40}},
{+283,+32,+723,{-20,-61,-41}},
{+112,+985,+724,{+61,+41,-20}},
{+282,+36,+725,{-19,-61,-41}},
{+281,+36,+727,{-19,-61,-42}},
{+113,+981,+727,{+61,+40,-20}},
{+114,+976,+731,{+62,+40,-21}},
{+280,+44,+731,{-18,-61,-43}},
{+279,+47,+733,{-17,-61,-43}},
{+278,+56,+737,{-16,-60,-44}},
{+277,+57,+738,{-16,-60,-44}},
{+115,+967,+739,{+62,+39,-22}},
{+276,+64,+741,{-15,-60,-45}},
{+116,+961,+743,{+62,+39,-23}},
{+275,+70,+743,{-14,-60,-45}},
{+117,+957,+745,{+62,+38,-23}},
{+274,+78,+746,{-13,-60,-46}},
{+273,+80,+747,{-13,-59,-46}},
{+271,+95,+752,{-11,-59,-47}},
{+118,+947,+753,{+62,+37,-24}},
{+270,+99,+753,{-10,-59,-48}},
{+272,+96,+753,{-12,-59,-47}},
{+269,+100,+754,{-10,-58,-48}},
{+119,+941,+756,{+62,+37,-25}},
{+267,+109,+756,{-8,-58,-49}},
{+268,+104,+756,{-9,-58,-49}},
{+266,+115,+760,{-7,-58,-50}},
{+265,+122,+761,{-6,-57,-50}},
{+264,+121,+761,{-6,-57,-51}},
{+120,+930,+763,{+62,+36,-26}},
{+263,+127,+763,{-5,-57,-51}},
{+121,+929,+764,{+62,+36,-26}},
{+262,+135,+766,{-4,-56,-52}},
{+260,+137,+766,{-3,-56,-52}},
{+258,+143,+767,{-1,-55,-53}},
{+259,+144,+767,{-2,-55,-53}},
{+261,+136,+767,{-3,-56,-52}},
{+122,+919,+770,{+62,+35,-27}},
{+124,+910,+775,{+62,+34,-28}},
{+123,+910,+776,{+62,+34,-28}},
{+257,+178,+776,{0,-54,-54}},
{+125,+905,+777,{+62,+33,-29}},
{+256,+179,+777,{0,-54,-54}},
{+255,+176,+777,{0,-54,-54}},
{+127,+891,+784,{+62,+32,-30}},
{+126,+892,+784,{+62,+32,-30}},
{+254,+220,+786,{+1,-53,-55}},
{+252,+227,+787,{+3,-52,-56}},
{+253,+222,+787,{+2,-53,-55}},
{+250,+231,+787,{+4,-52,-56}},
{+251,+228,+788,{+3,-52,-56}},
{+128,+883,+788,{+63,+31,-31}},
{+249,+240,+790,{+5,-51,-57}},
{+248,+241,+791,{+6,-51,-57}},
{+247,+244,+791,{+6,-50,-57}},
{+245,+256,+794,{+8,-49,-58}},
{+130,+871,+794,{+62,+30,-32}},
{+129,+872,+794,{+62,+30,-32}},
{+244,+261,+795,{+9,-49,-58}},
{+246,+251,+795,{+7,-50,-58}},
{+242,+269,+796,{+10,-48,-59}},
{+243,+267,+796,{+10,-48,-58}},
{+131,+861,+796,{+62,+29,-33}},
{+241,+275,+797,{+11,-47,-59}},
{+240,+281,+798,{+12,-47,-59}},
{+238,+288,+799,{+13,-46,-60}},
{+239,+286,+800,{+13,-46,-59}},
{+237,+295,+800,{+14,-45,-60}},
{+236,+301,+802,{+15,-45,-60}},
{+132,+851,+802,{+62,+28,-34}},
{+235,+304,+803,{+16,-44,-60}},
{+234,+308,+803,{+16,-44,-60}},
{+133,+851,+803,{+62,+28,-34}},
{+233,+314,+804,{+17,-43,-61}},
{+232,+319,+805,{+18,-43,-61}},
{+134,+843,+806,{+62,+27,-35}},
{+230,+328,+807,{+19,-41,-61}},
{+229,+332,+807,{+20,-41,-61}},
{+231,+326,+807,{+19,-42,-61}},
{+227,+335,+808,{+21,-40,-62}},
{+228,+337,+809,{+21,-40,-61}},
{+135,+833,+809,{+62,+26,-36}},
{+226,+345,+810,{+22,-39,-62}},
{+136,+832,+810,{+62,+26,-36}},
{+225,+350,+811,{+23,-38,-62}},
{+224,+352,+811,{+24,-38,-62}},
{+223,+360,+812,{+24,-37,-62}},
{+222,+362,+813,{+25,-37,-62}},
{+137,+822,+813,{+62,+25,-37}},
{+221,+370,+814,{+26,-36,-62}},
{+138,+818,+815,{+62,+24,-37}},
{+220,+378,+815,{+26,-35,-62}},
{+219,+380,+816,{+27,-35,-62}},
{+139,+810,+817,{+62,+23,-38}},
{+218,+391,+817,{+28,-34,-62}},
{+217,+397,+818,{+29,-33,-62}},
{+216,+397,+818,{+29,-33,-62}},
{+140,+805,+819,{+62,+23,-39}},
{+213,+411,+820,{+31,-31,-62}},
{+141,+801,+820,{+62,+22,-39}},
{+215,+404,+820,{+30,-32,-62}},
{+214,+410,+821,{+31,-31,-62}},
{+142,+791,+822,{+62,+21,-40}},
{+210,+425,+822,{+33,-29,-62}},
{+211,+425,+822,{+33,-29,-62}},
{+212,+420,+822,{+32,-30,-62}},
{+209,+433,+823,{+34,-28,-62}},
{+208,+439,+824,{+35,-27,-62}},
{+143,+784,+824,{+61,+20,-40}},
{+144,+780,+825,{+61,+20,-41}},
{+207,+442,+825,{+35,-27,-62}},
{+206,+449,+826,{+36,-26,-62}},
{+204,+456,+827,{+37,-25,-62}},
{+205,+454,+827,{+36,-25,-62}},
{+203,+464,+828,{+38,-24,-62}},
{+145,+772,+828,{+61,+19,-42}},
{+200,+476,+828,{+39,-22,-62}},
{+147,+763,+829,{+61,+18,-43}},
{+146,+767,+829,{+61,+18,-42}},
{+202,+469,+829,{+38,-23,-62}},
{+148,+760,+830,{+61,+17,-43}},
{+201,+476,+830,{+39,-22,-62}},
{+195,+503,+831,{+42,-18,-61}},
{+199,+483,+831,{+40,-21,-62}},
{+198,+491,+832,{+41,-20,-61}},
{+149,+752,+832,{+60,+16,-44}},
{+150,+746,+833,{+60,+15,-44}},
{+197,+491,+833,{+41,-20,-61}},
{+196,+498,+833,{+42,-19,-61}},
{+194,+509,+834,{+43,-17,-61}},
{+151,+740,+834,{+60,+15,-45}},
{+193,+510,+834,{+43,-17,-61}},
{+152,+737,+835,{+60,+14,-45}},
{+192,+517,+836,{+44,-16,-60}},
{+191,+523,+836,{+45,-15,-60}},
{+153,+725,+836,{+60,+13,-46}},
{+190,+526,+837,{+45,-14,-60}},
{+189,+530,+837,{+46,-14,-60}},
{+155,+715,+838,{+59,+12,-47}},
{+154,+715,+838,{+59,+12,-47}},
{+187,+542,+838,{+47,-12,-59}},
{+186,+546,+838,{+47,-11,-59}},
{+184,+552,+838,{+48,-10,-58}},
{+188,+536,+838,{+46,-13,-59}},
{+156,+710,+839,{+59,+11,-48}},
{+157,+705,+839,{+59,+10,-48}},
{+183,+559,+839,{+49,-9,-58}},
{+185,+549,+839,{+48,-11,-59}},
{+182,+563,+839,{+49,-8,-58}},
{+158,+701,+840,{+58,+9,-49}},
{+180,+571,+840,{+50,-7,-57}},
{+159,+696,+840,{+58,+8,-49}},
{+162,+686,+840,{+57,+6,-50}},
{+170,+621,+840,{+54,0,-54}},
{+160,+697,+840,{+58,+8,-49}},
{+181,+568,+840,{+50,-7,-58}},
{+165,+677,+841,{+56,+4,-52}},
{+179,+575,+841,{+51,-6,-57}},
{+177,+585,+841,{+51,-4,-56}},
{+161,+691,+841,{+57,+7,-50}},
{+163,+686,+841,{+57,+5,-51}},
{+164,+686,+841,{+56,+5,-51}},
{+174,+599,+842,{+53,-2,-55}},
{+175,+591,+842,{+52,-3,-56}},
{+176,+587,+842,{+52,-4,-56}},
{+166,+670,+842,{+56,+3,-52}},
{+178,+580,+842,{+51,-5,-57}},
{+171,+620,+842,{+54,0,-54}},
{+168,+659,+842,{+55,+2,-53}},
{+173,+601,+842,{+53,-1,-55}},
{+167,+660,+843,{+55,+2,-53}},
{+172,+603,+843,{+54,-1,-55}},
{+169,+656,+843,{+55,+1,-53}}



};



struct IndexVal
{
    S32 position;

    S32 count;
};

static IndexVal TABLEindex[] =
{
{0,1}, //0
{0,1}, //1
{0,1}, //2
{0,1}, //3
{0,1}, //4
{0,1}, //5
{0,1}, //6
{0,1}, //7
{0,1}, //8
{0,1}, //9
{0,1}, //10
{0,1}, //11
{0,1}, //12
{0,1}, //13
{0,1}, //14
{0,1}, //15
{0,1}, //16
{0,1}, //17
{0,1}, //18
{0,1}, //19
{0,1}, //20
{0,1}, //21
{0,1}, //22
{0,1}, //23
{0,1}, //24
{0,1}, //25
{0,1}, //26
{0,1}, //27
{0,1}, //28
{0,1}, //29
{0,1}, //30
{0,1}, //31
{0,1}, //32
{0,1}, //33
{0,1}, //34
{0,1}, //35
{0,1}, //36
{0,1}, //37
{0,1}, //38
{0,1}, //39
{0,1}, //40
{0,1}, //41
{0,1}, //42
{0,1}, //43
{0,1}, //44
{0,1}, //45
{0,1}, //46
{0,1}, //47
{0,1}, //48
{0,1}, //49
{0,1}, //50
{0,1}, //51
{0,1}, //52
{0,1}, //53
{0,1}, //54
{0,1}, //55
{0,1}, //56
{0,1}, //57
{0,1}, //58
{0,1}, //59
{0,1}, //60
{0,1}, //61
{0,1}, //62
{0,1}, //63
{0,1}, //64
{0,1}, //65
{0,1}, //66
{0,1}, //67
{0,1}, //68
{0,1}, //69
{0,1}, //70
{0,1}, //71
{0,1}, //72
{0,1}, //73
{0,1}, //74
{0,1}, //75
{0,1}, //76
{0,1}, //77
{0,1}, //78
{0,1}, //79
{0,1}, //80
{0,1}, //81
{0,1}, //82
{0,1}, //83
{0,1}, //84
{0,1}, //85
{0,1}, //86
{0,1}, //87
{0,1}, //88
{0,1}, //89
{0,1}, //90
{0,1}, //91
{0,1}, //92
{0,1}, //93
{0,1}, //94
{0,1}, //95
{0,1}, //96
{0,1}, //97
{0,1}, //98
{0,1}, //99
{0,1}, //100
{0,1}, //101
{0,1}, //102
{0,1}, //103
{0,1}, //104
{0,1}, //105
{0,1}, //106
{0,1}, //107
{0,1}, //108
{0,1}, //109
{0,1}, //110
{0,1}, //111
{0,1}, //112
{0,1}, //113
{0,1}, //114
{0,1}, //115
{0,1}, //116
{0,1}, //117
{0,1}, //118
{0,1}, //119
{0,1}, //120
{0,1}, //121
{0,1}, //122
{0,1}, //123
{0,1}, //124
{0,1}, //125
{0,1}, //126
{0,1}, //127
{0,1}, //128
{0,1}, //129
{0,1}, //130
{0,1}, //131
{0,1}, //132
{0,1}, //133
{0,1}, //134
{0,1}, //135
{0,1}, //136
{0,1}, //137
{0,1}, //138
{0,1}, //139
{0,1}, //140
{0,1}, //141
{0,1}, //142
{0,1}, //143
{0,1}, //144
{0,1}, //145
{0,1}, //146
{0,1}, //147
{0,1}, //148
{0,1}, //149
{0,1}, //150
{0,1}, //151
{0,1}, //152
{0,1}, //153
{0,1}, //154
{0,1}, //155
{0,1}, //156
{1,6}, //157
{7,10}, //158
{17,6}, //159
{23,4}, //160
{27,3}, //161
{30,3}, //162
{33,4}, //163
{37,3}, //164
{40,3}, //165
{43,2}, //166
{45,6}, //167
{51,2}, //168
{53,1}, //169
{54,3}, //170
{57,2}, //171
{59,3}, //172
{62,1}, //173
{63,3}, //174
{63,3}, //175
{66,3}, //176
{69,2}, //177
{71,3}, //178
{74,4}, //179
{74,4}, //180
{78,5}, //181
{78,5}, //182
{83,2}, //183
{83,2}, //184
{85,2}, //185
{87,1}, //186
{88,1}, //187
{89,1}, //188
{90,4}, //189
{90,4}, //190
{94,1}, //191
{95,2}, //192
{97,2}, //193
{99,2}, //194
{99,2}, //195
{101,1}, //196
{102,4}, //197
{106,1}, //198
{107,1}, //199
{108,2}, //200
{110,3}, //201
{110,3}, //202
{113,1}, //203
{114,1}, //204
{115,2}, //205
{117,2}, //206
{119,1}, //207
{120,3}, //208
{120,3}, //209
{123,1}, //210
{124,2}, //211
{126,3}, //212
{129,1}, //213
{130,1}, //214
{130,1}, //215
{131,3}, //216
{134,1}, //217
{134,1}, //218
{134,1}, //219
{134,1}, //220
{135,1}, //221
{135,1}, //222
{135,1}, //223
{135,1}, //224
{136,1}, //225
{137,2}, //226
{139,1}, //227
{140,2}, //228
{140,2}, //229
{142,2}, //230
{144,1}, //231
{144,1}, //232
{145,3}, //233
{148,2}, //234
{150,1}, //235
{151,1}, //236
{151,1}, //237
{152,1}, //238
{152,1}, //239
{152,1}, //240
{153,2}, //241
{153,2}, //242
{153,2}, //243
{155,2}, //244
{155,2}, //245
{157,1}, //246
{158,1}, //247
{159,1}, //248
{159,1}, //249
{160,1}, //250
{160,1}, //251
{161,1}, //252
{161,1}, //253
{162,1}, //254
{162,1}, //255
{163,2}, //256
{163,2}, //257
{163,2}, //258
{165,1}, //259
{165,1}, //260
{166,2}, //261
{166,2}, //262
{168,1}, //263
{169,1}, //264
{169,1}, //265
{169,1}, //266
{170,2}, //267
{170,2}, //268
{170,2}, //269
{172,1}, //270
{172,1}, //271
{173,2}, //272
{173,2}, //273
{175,1}, //274
{175,1}, //275
{176,1}, //276
{177,1}, //277
{177,1}, //278
{178,1}, //279
{178,1}, //280
{178,1}, //281
{179,1}, //282
{179,1}, //283
{180,1}, //284
{180,1}, //285
{181,1}, //286
{181,1}, //287
{182,1}, //288
{182,1}, //289
{183,1}, //290
{183,1}, //291
{184,1}, //292
{184,1}, //293
{185,1}, //294
{185,1}, //295
{186,1}, //296
{187,2}, //297
{187,2}, //298
{187,2}, //299
{189,1}, //300
{189,1}, //301
{189,1}, //302
{189,1}, //303
{190,1}, //304
{190,1}, //305
{190,1}, //306
{191,2}, //307
{191,2}, //308
{193,1}, //309
{193,1}, //310
{193,1}, //311
{193,1}, //312
{194,1}, //313
{194,1}, //314
{194,1}, //315
{194,1}, //316
{195,1}, //317
{196,1}, //318
{196,1}, //319
{197,1}, //320
{197,1}, //321
{198,1}, //322
{198,1}, //323
{198,1}, //324
{199,2}, //325
{199,2}, //326
{199,2}, //327
{199,2}, //328
{199,2}, //329
{201,1}, //330
{201,1}, //331
{201,1}, //332
{202,3}, //333
{202,3}, //334
{202,3}, //335
{202,3}, //336
{202,3}, //337
{205,1}, //338
{205,1}, //339
{205,1}, //340
{205,1}, //341
{205,1}, //342
{206,1}, //343
{206,1}, //344
{207,3}, //345
{207,3}, //346
{207,3}, //347
{207,3}, //348
{210,1}, //349
{210,1}, //350
{210,1}, //351
{210,1}, //352
{210,1}, //353
{211,2}, //354
{211,2}, //355
{211,2}, //356
{211,2}, //357
{213,1}, //358
{213,1}, //359
{214,1}, //360
{214,1}, //361
{214,1}, //362
{214,1}, //363
{215,1}, //364
{215,1}, //365
{215,1}, //366
{215,1}, //367
{216,1}, //368
{216,1}, //369
{217,1}, //370
{217,1}, //371
{217,1}, //372
{218,1}, //373
{218,1}, //374
{218,1}, //375
{218,1}, //376
{219,2}, //377
{219,2}, //378
{219,2}, //379
{219,2}, //380
{221,1}, //381
{221,1}, //382
{221,1}, //383
{222,1}, //384
{222,1}, //385
{222,1}, //386
{223,1}, //387
{223,1}, //388
{224,1}, //389
{224,1}, //390
{225,1}, //391
{225,1}, //392
{226,1}, //393
{226,1}, //394
{227,2}, //395
{227,2}, //396
{227,2}, //397
{227,2}, //398
{227,2}, //399
{229,1}, //400
{229,1}, //401
{229,1}, //402
{229,1}, //403
{229,1}, //404
{229,1}, //405
{230,1}, //406
{230,1}, //407
{231,2}, //408
{231,2}, //409
{231,2}, //410
{231,2}, //411
{231,2}, //412
{233,1}, //413
{233,1}, //414
{233,1}, //415
{233,1}, //416
{234,1}, //417
{234,1}, //418
{234,1}, //419
{234,1}, //420
{235,1}, //421
{235,1}, //422
{235,1}, //423
{235,1}, //424
{235,1}, //425
{235,1}, //426
{235,1}, //427
{235,1}, //428
{236,1}, //429
{236,1}, //430
{236,1}, //431
{236,1}, //432
{236,1}, //433
{236,1}, //434
{236,1}, //435
{237,1}, //436
{237,1}, //437
{237,1}, //438
{237,1}, //439
{238,1}, //440
{238,1}, //441
{239,1}, //442
{239,1}, //443
{240,1}, //444
{240,1}, //445
{240,1}, //446
{241,1}, //447
{241,1}, //448
{242,1}, //449
{242,1}, //450
{242,1}, //451
{242,1}, //452
{243,1}, //453
{243,1}, //454
{243,1}, //455
{243,1}, //456
{243,1}, //457
{244,2}, //458
{244,2}, //459
{244,2}, //460
{244,2}, //461
{244,2}, //462
{246,2}, //463
{246,2}, //464
{246,2}, //465
{246,2}, //466
{248,1}, //467
{248,1}, //468
{248,1}, //469
{249,1}, //470
{249,1}, //471
{249,1}, //472
{249,1}, //473
{250,1}, //474
{250,1}, //475
{250,1}, //476
{250,1}, //477
{251,1}, //478
{251,1}, //479
{251,1}, //480
{252,1}, //481
{252,1}, //482
{253,1}, //483
{253,1}, //484
{253,1}, //485
{254,1}, //486
{254,1}, //487
{254,1}, //488
{255,1}, //489
{255,1}, //490
{256,1}, //491
{256,1}, //492
{257,1}, //493
{257,1}, //494
{257,1}, //495
{258,1}, //496
{258,1}, //497
{258,1}, //498
{259,1}, //499
{259,1}, //500
{259,1}, //501
{260,1}, //502
{260,1}, //503
{260,1}, //504
{261,1}, //505
{261,1}, //506
{261,1}, //507
{261,1}, //508
{261,1}, //509
{262,1}, //510
{262,1}, //511
{262,1}, //512
{263,1}, //513
{263,1}, //514
{263,1}, //515
{264,1}, //516
{264,1}, //517
{265,1}, //518
{265,1}, //519
{266,1}, //520
{266,1}, //521
{267,1}, //522
{267,1}, //523
{267,1}, //524
{268,1}, //525
{268,1}, //526
{268,1}, //527
{268,1}, //528
{269,1}, //529
{269,1}, //530
{269,1}, //531
{269,1}, //532
{270,2}, //533
{270,2}, //534
{270,2}, //535
{272,1}, //536
{272,1}, //537
{272,1}, //538
{273,2}, //539
{273,2}, //540
{273,2}, //541
{273,2}, //542
{273,2}, //543
{273,2}, //544
{273,2}, //545
{275,1}, //546
{275,1}, //547
{275,1}, //548
{275,1}, //549
{275,1}, //550
{275,1}, //551
{275,1}, //552
{275,1}, //553
{275,1}, //554
{276,1}, //555
{276,1}, //556
{276,1}, //557
{276,1}, //558
{276,1}, //559
{276,1}, //560
{276,1}, //561
{277,1}, //562
{277,1}, //563
{277,1}, //564
{277,1}, //565
{278,1}, //566
{278,1}, //567
{278,1}, //568
{278,1}, //569
{278,1}, //570
{279,2}, //571
{279,2}, //572
{279,2}, //573
{279,2}, //574
{281,1}, //575
{281,1}, //576
{281,1}, //577
{281,1}, //578
{282,1}, //579
{282,1}, //580
{282,1}, //581
{282,1}, //582
{282,1}, //583
{282,1}, //584
{283,3}, //585
{283,3}, //586
{283,3}, //587
{283,3}, //588
{283,3}, //589
{286,2}, //590
{286,2}, //591
{286,2}, //592
{288,1}, //593
{288,1}, //594
{288,1}, //595
{288,1}, //596
{289,1}, //597
{289,1}, //598
{289,1}, //599
{290,1}, //600
{290,1}, //601
{290,1}, //602
{290,1}, //603
{291,2}, //604
{291,2}, //605
{291,2}, //606
{291,2}, //607
{293,1}, //608
{293,1}, //609
{293,1}, //610
{293,1}, //611
{294,2}, //612
{294,2}, //613
{294,2}, //614
{294,2}, //615
{294,2}, //616
{294,2}, //617
{296,1}, //618
{296,1}, //619
{296,1}, //620
{296,1}, //621
{297,1}, //622
{297,1}, //623
{297,1}, //624
{297,1}, //625
{298,1}, //626
{298,1}, //627
{298,1}, //628
{299,1}, //629
{300,1}, //630
{300,1}, //631
{300,1}, //632
{301,1}, //633
{301,1}, //634
{301,1}, //635
{301,1}, //636
{301,1}, //637
{302,2}, //638
{302,2}, //639
{302,2}, //640
{304,2}, //641
{304,2}, //642
{304,2}, //643
{306,1}, //644
{306,1}, //645
{306,1}, //646
{306,1}, //647
{306,1}, //648
{307,1}, //649
{307,1}, //650
{307,1}, //651
{307,1}, //652
{308,2}, //653
{310,1}, //654
{310,1}, //655
{310,1}, //656
{311,1}, //657
{311,1}, //658
{312,1}, //659
{312,1}, //660
{312,1}, //661
{312,1}, //662
{313,1}, //663
{313,1}, //664
{313,1}, //665
{314,1}, //666
{315,1}, //667
{316,1}, //668
{316,1}, //669
{316,1}, //670
{316,1}, //671
{317,1}, //672
{317,1}, //673
{317,1}, //674
{317,1}, //675
{318,1}, //676
{318,1}, //677
{318,1}, //678
{319,1}, //679
{319,1}, //680
{320,1}, //681
{321,1}, //682
{321,1}, //683
{321,1}, //684
{322,1}, //685
{322,1}, //686
{322,1}, //687
{323,1}, //688
{324,1}, //689
{324,1}, //690
{325,1}, //691
{325,1}, //692
{326,1}, //693
{327,1}, //694
{327,1}, //695
{328,1}, //696
{328,1}, //697
{328,1}, //698
{328,1}, //699
{329,1}, //700
{329,1}, //701
{329,1}, //702
{329,1}, //703
{330,1}, //704
{331,1}, //705
{331,1}, //706
{332,1}, //707
{333,1}, //708
{334,1}, //709
{334,1}, //710
{334,1}, //711
{335,1}, //712
{335,1}, //713
{336,1}, //714
{336,1}, //715
{337,1}, //716
{338,1}, //717
{339,1}, //718
{339,1}, //719
{339,1}, //720
{340,1}, //721
{340,1}, //722
{340,1}, //723
{341,1}, //724
{342,1}, //725
{342,1}, //726
{343,2}, //727
{343,2}, //728
{343,2}, //729
{345,2}, //730
{345,2}, //731
{345,2}, //732
{347,1}, //733
{347,1}, //734
{347,1}, //735
{348,1}, //736
{348,1}, //737
{349,1}, //738
{350,1}, //739
{350,1}, //740
{351,1}, //741
{351,1}, //742
{352,2}, //743
{352,2}, //744
{354,1}, //745
{355,1}, //746
{356,1}, //747
{356,1}, //748
{356,1}, //749
{357,1}, //750
{357,1}, //751
{357,1}, //752
{358,3}, //753
{361,1}, //754
{361,1}, //755
{362,3}, //756
{362,3}, //757
{362,3}, //758
{365,1}, //759
{365,1}, //760
{366,2}, //761
{366,2}, //762
{368,2}, //763
{370,1}, //764
{370,1}, //765
{371,2}, //766
{373,3}, //767
{373,3}, //768
{376,1}, //769
{376,1}, //770
{376,1}, //771
{376,1}, //772
{377,1}, //773
{377,1}, //774
{377,1}, //775
{378,2}, //776
{380,3}, //777
{380,3}, //778
{380,3}, //779
{380,3}, //780
{383,2}, //781
{383,2}, //782
{383,2}, //783
{383,2}, //784
{383,2}, //785
{385,1}, //786
{386,3}, //787
{389,2}, //788
{389,2}, //789
{391,1}, //790
{392,2}, //791
{392,2}, //792
{394,3}, //793
{394,3}, //794
{397,2}, //795
{399,3}, //796
{402,1}, //797
{403,1}, //798
{404,1}, //799
{405,2}, //800
{405,2}, //801
{407,2}, //802
{409,3}, //803
{412,1}, //804
{413,1}, //805
{414,1}, //806
{415,3}, //807
{418,1}, //808
{419,2}, //809
{421,2}, //810
{423,2}, //811
{425,1}, //812
{426,2}, //813
{428,1}, //814
{429,2}, //815
{431,1}, //816
{432,2}, //817
{434,2}, //818
{436,1}, //819
{437,3}, //820
{440,1}, //821
{441,4}, //822
{445,1}, //823
{446,2}, //824
{448,2}, //825
{450,1}, //826
{451,2}, //827
{453,3}, //828
{456,3}, //829
{459,2}, //830
{461,2}, //831
{463,2}, //832
{465,3}, //833
{468,3}, //834
{471,1}, //835
{472,3}, //836
{475,2}, //837
{477,6}, //838
{483,5}, //839
{488,7}, //840
{495,6}, //841
{501,8}, //842
{501,8}, //843
{501,8}, //844
{501,8}, //845
{501,8}, //846
{501,8}, //847
{501,8}, //848
{501,8}, //849
{501,8}, //850
{501,8}, //851
{501,8}, //852
{501,8}, //853
{501,8}, //854
{501,8}, //855
{501,8}, //856
{501,8}, //857
{501,8}, //858
{501,8}, //859
{501,8}, //860
{501,8}, //861
{501,8}, //862
{501,8}, //863
{501,8}, //864
{501,8}, //865
{501,8}, //866
{501,8}, //867
{501,8}, //868
{501,8}, //869
{501,8}, //870
{501,8}, //871
{501,8}, //872
{501,8}, //873
{501,8}, //874
{501,8}, //875
{501,8}, //876
{501,8}, //877
{501,8}, //878
{501,8}, //879
{501,8}, //880
{501,8}, //881
{501,8}, //882
{501,8}, //883
{501,8}, //884
{501,8}, //885
{501,8}, //886
{501,8}, //887
{501,8}, //888
{501,8}, //889
{501,8}, //890
{501,8}, //891
{501,8}, //892
{501,8}, //893
{501,8}, //894
{501,8}, //895
{501,8}, //896
{501,8}, //897
{501,8}, //898
{501,8}, //899
{501,8}, //900
{501,8}, //901
{501,8}, //902
{501,8}, //903
{501,8}, //904
{501,8}, //905
{501,8}, //906
{501,8}, //907
{501,8}, //908
{501,8}, //909
{501,8}, //910
{501,8}, //911
{501,8}, //912
{501,8}, //913
{501,8}, //914
{501,8}, //915
{501,8}, //916
{501,8}, //917
{501,8}, //918
{501,8}, //919
{501,8}, //920
{501,8}, //921
{501,8}, //922
{501,8}, //923
{501,8}, //924
{501,8}, //925
{501,8}, //926
{501,8}, //927
{501,8}, //928
{501,8}, //929
{501,8}, //930
{501,8}, //931
{501,8}, //932
{501,8}, //933
{501,8}, //934
{501,8}, //935
{501,8}, //936
{501,8}, //937
{501,8}, //938
{501,8}, //939
{501,8}, //940
{501,8}, //941
{501,8}, //942
{501,8}, //943
{501,8}, //944
{501,8}, //945
{501,8}, //946
{501,8}, //947
{501,8}, //948
{501,8}, //949
{501,8}, //950
{501,8}, //951
{501,8}, //952
{501,8}, //953
{501,8}, //954
{501,8}, //955
{501,8}, //956
{501,8}, //957
{501,8}, //958
{501,8}, //959
{501,8}, //960
{501,8}, //961
{501,8}, //962
{501,8}, //963
{501,8}, //964
{501,8}, //965
{501,8}, //966
{501,8}, //967
{501,8}, //968
{501,8}, //969
{501,8}, //970
{501,8}, //971
{501,8}, //972
{501,8}, //973
{501,8}, //974
{501,8}, //975
{501,8}, //976
{501,8}, //977
{501,8}, //978
{501,8}, //979
{501,8}, //980
{501,8}, //981
{501,8}, //982
{501,8}, //983
{501,8}, //984
{501,8}, //985
{501,8}, //986
{501,8}, //987
{501,8}, //988
{501,8}, //989
{501,8}, //990
{501,8}, //991
{501,8}, //992
{501,8}, //993
{501,8}, //994
{501,8}, //995
{501,8}, //996
{501,8}, //997
{501,8}, //998
{501,8}, //999
{501,8}, //1000
{501,8}, //1001
{501,8}, //1002
{501,8}, //1003
{501,8}, //1004
{501,8}, //1005
{501,8}, //1006
{501,8}, //1007
{501,8}, //1008
{501,8}, //1009
{501,8}, //1010
{501,8}, //1011
{501,8}, //1012
{501,8}, //1013
{501,8}, //1014
{501,8}, //1015
{501,8}, //1016
{501,8}, //1017
{501,8}, //1018
{501,8}, //1019
{501,8}, //1020
{501,8}, //1021
{501,8}, //1022
{501,8} //1023



};



static const U32 TABLE_SIZE = sizeof(TABLE) / sizeof(Entry);

static const U32 NewTABLE_SIZE = sizeof(NewTABLE) / sizeof(NewEntry);

static const U32 QUADRANT_SIZE = TABLE_SIZE / 4;

static const U32 FORCE_OFFSET = TABLE_SIZE / 4;

static const U32 TABLE_MASK = TABLE_SIZE - 1;

Motor::Motor():

_adc(ADC::instance()),

_allegro(Allegro::instance()),

_coarse(0),

_poserr(0),

_zero(0),

_P1(0),

_P2(0),

_delay(0),

delayCount(0),

//_p(0.0125)
_p(0)

{
      _fine = index();
     _last_position = _fine;

      //Motor::home();
      Motor::zero();

     for(int i=0;i<(DUR_AVG);i++)
             {
               _durations[i]=0;
             }


    _target = 0;

    _v_datum = position();



    // Enable clocks to the timer.
    *AT91C_PMC_PCER = 1 << AT91C_ID_TC0;

    OS_ARM_InstallISRHandler(AT91C_ID_TC0, timerInterrupt);

    OS_ARM_ISRSetPrio(AT91C_ID_TC0, MOTOR_INTERRUPT_PRIORITY);


    // Clear interrupts on the interrupt controller.
    *AT91C_AIC_ICCR = 1 << AT91C_ID_TC0;

    // Select waveform mode and use mode 2 which resets the timer on
    // comparison with register C.
    *AT91C_TC0_CMR = (1 << 15) | (2 << 13);

    *AT91C_TC0_RC = TIMER_CLOCK_FREQUENCY / INTERRUPT_FREQUENCY;

    // Disable all interrupts.
    *AT91C_TC0_IDR = 0xFF;

    // Interrupt on register C compare.
    *AT91C_TC0_IER = AT91C_TC_CPCS;

    OS_ARM_EnableISR(AT91C_ID_TC0);

     Motor::ConfigurePIOInterrupts();


    enabled(true);
}





void Motor::ConfigurePIOInterrupts(void)
{

  //PA7 PA19

      //set Encoder input A as GPIO
      *AT91C_PIOA_PER = (1<<7)|(1<<19);

      //set Encoder input B as FIQ
     // *AT91C_PIOA_PDR = (1<<19);
     // *AT91C_PIOA_BSR = (1<<19);

        //disable interrupt
      //*AT91C_AIC_IDCR=(1<<AT91C_ID_PIOA);//PIOA

      // Read PIO controller status
      //volatile U32 i = *AT91C_PIOA_ISR;
      //disable every PIO interrupt
      //*AT91C_PIOA_IDR= 0xFFFFFFFF;

      //configure interrupt
      AT91C_AIC_SMR[AT91C_ID_PIOA]=AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE|(0x7<<0);

      OS_ARM_InstallISRHandler(AT91C_ID_PIOA, encoderInterrupt);
      OS_ARM_ISRSetPrio(AT91C_ID_PIOA, ENCODER_INTERRUPT_PRIORITY);

      //clear interrupt
      *AT91C_AIC_ICCR=(1<<AT91C_ID_PIOA);//PIOA

      //enable PIO interrupt filters
      *AT91C_PIOA_IFER=(1<<7)|(1<<19);

       //enable PIO interrupts
      *AT91C_PIOA_IER=(1<<7)|(1<<19);

      //set interrupt (for testing)
    //  *AT91C_AIC_ISCR=(1<<AT91C_ID_PIOA);//PIOA

      //enable interrupt
      // OS_ARM_EnableISR(AT91C_ID_PIOA);


}



void Motor::encoder(void)
{
  // Read PIO controller status to clear status bit
    volatile U32 status = *AT91C_PIOA_ISR;

    if(status&(1<<7))
    {

       if(*AT91C_PIOA_PDSR&(1<<7))
       {

          // Benchmark.
        *AT91C_PIOA_SODR = 1 << 29;

          /* if(*AT91C_PIOA_PDSR&(1<<19))
         {
           _encoder--;

         }else
         {
            _encoder++;

         }     */

       }else
       {
          /* if(*AT91C_PIOA_PDSR&(1<<19))
         {
           _encoder++;

         }else
         {
            _encoder--;

         }   */


       // Benchmark.
        *AT91C_PIOA_CODR = 1 << 29;

       }

    }




}


Motor::~Motor()
{
}

void *Motor::operator new(size_t, void *location)
{
    return(location);
}

void Motor::timerInterrupt(void)
{
    _instance->interrupt();
}

void Motor::encoderInterrupt(void)
{
    _instance->encoder();
}

Motor &Motor::instance(void)
{
    #pragma data_alignment = __ALIGNOF__(Motor)

    static U8 allocation[sizeof(Motor)];

    if (_instance == 0)
    {
        _instance = new (allocation) Motor();
    }

    return(*_instance);
}

void Motor::position(S32 position)
{
    //S32 LIMIT = TABLE_SIZE * 2;


    if (position > UPPER_LIMIT)
    {
        position = UPPER_LIMIT;
    }

    if (position < LOWER_LIMIT)
    {
        position = LOWER_LIMIT;
    }

    _target = position;


}

S32 Motor::position(void)
{
    return((_coarse * TABLE_SIZE) + _fine -_zero);
}

S32 Motor::fine(void)
{
  return(_fine);
}

S32 Motor::newfine(void)
{
  return(_newfine);
}


void Motor::zero(void)
{

 _coarse=0;
    _fine=Motor::altIndex();
    _zero=_fine;
    _last_fine = _fine;
}

S32 Motor::duration(void)
{
    return(_duration);
}

S32 Motor::posErr(void)
{
    return(_poserr);
}

void Motor::enabled(bool state)
{
    if (_enabled == state)
    {
        return;
    }

    if (state == true)
    {
        *AT91C_TC0_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;
    }
    else
    {
        *AT91C_TC0_CCR = AT91C_TC_CLKDIS;

        // Zero current to motor.

        // TODO: May wish to provide Allegro::current(a, b, c).
        Allegro::CurrentPoint p;

        memset(&p, 0, sizeof(p));

        _allegro.current(p);
    }

    _enabled = state;
}

bool Motor::enabled(void)
{
    return(_enabled);
}

void Motor::pid(F32 p, F32 d)
{
    _p = p;

    _d = d;
}

void Motor::home(void)
{


  _p = 0;
  _d = 0;

  S32 i = TABLE_SIZE-1;
  S32 run = 1;
  F32 force = 0.6f;
  U32 step=5;


   i = Motor::index();
   while(_poserr>2000)
   {
     i=Motor::altIndex();
   }

  for(int k=0;k<10;k++)
  {
  Motor::step(i, force/10.0f*k);
  OS_Delay(100);
  }

  while(run==1)
  {

    i-=step;

    if(i<0)
    {
     i=TABLE_SIZE-1;
    }

     Motor::step(i,force);


     OS_Delay(10);

     Motor::index();

     if(_poserr>6000)
     {

       for(int j=0;j<QUADRANT_SIZE*2;)
       {
         j+=step;
         i+=step;
         if(i>=TABLE_SIZE)
         {
          i = 0;
         }
        Motor::step(i,force);
        OS_Delay(10);
       }

       Motor::zero();
       Motor::step(i,0.0f);

       run=0;
     }



  }


}



void Motor::step(U32 index, F32 scale)
{

    Allegro::CurrentPoint &force_point = TABLE[(index) & TABLE_MASK].current;

    Allegro::CurrentPoint p;

    p.a = S32(force_point.a * scale);

    p.b = S32(force_point.b * scale);

    p.c = S32(force_point.c * scale);

    _allegro.current(p);


}



void Motor::interrupt(void)
{


       /*
       Allegro::CurrentPoint p;

    p.a = S32(_p*250);

    p.b = S32(_p*250);

    p.c = S32(_p*250);

    _allegro.current(p);


*/

   _fine = Motor::index();

     // Benchmark.
        *AT91C_PIOA_SODR = 1 << 29;


   // _newfine = Motor::altIndex();
        _fine=Motor::index();

       // Benchmark.
        *AT91C_PIOA_CODR = 1 << 29;


    if ((_last_fine < QUADRANT_SIZE) and (_fine > QUADRANT_SIZE * 3))
    {
        --_coarse;
    }

    if ((_fine < QUADRANT_SIZE) and (_last_fine > QUADRANT_SIZE * 3))
    {
        ++_coarse;
    }

    _last_fine=_fine;

    Allegro::CurrentPoint &force_point = TABLE[(_fine + FORCE_OFFSET) & TABLE_MASK].current;



    if(_delay!=0)
    {
      delayCount++;

      if(delayCount==_delay)
      {
        _target=_P1;
      }
       if(delayCount==2*_delay)
      {
        _target=_P2;
        delayCount=0;
      }

    }



    F32 scale = Motor::scale();

    //scale=1;

    Allegro::CurrentPoint p;

    p.a = S32(force_point.a * scale);

    p.b = S32(force_point.b * scale);

    p.c = S32(force_point.c * scale);

    _allegro.current(p);


     // */



    _last_position = _fine;

    // Clear interrupt.
    volatile U32 status = *AT91C_TC0_SR;






}

void Motor::motion(U32 p1, U32 p2, U32 delay)
{
    _delay=delay;
    _P1=p1;
    _P2=p2;
    delayCount=0;

}



F32 Motor::scale(void)
{


    S32 position = Motor::position();

    S32 delta = _target - position;


          U32 limit = 150000;
          U8 jump=10;

         // _time = OS_GetTime_Cycles()/10;

        //  U32 time2=OS_ConvertCycles2us(_time);

           _time = OS_ConvertCycles2us(OS_GetTime_Cycles());

          S32 temp=_durations[DUR_AVG-1];

            if((position -_last_position)>jump || (position-_last_position)<(-jump))// if we jumped
          {
                if((_time-_last_time)<limit)
               {
                          if(position-_last_position<0)
                          {
                             temp = (_time-_last_time);
                          }else  if(position-_last_position>0)
                          {
                             temp = (_time-_last_time)*-1;
                          }
               }

                   _last_time =_time;
                   _last_position =position;


           }else
           {
            if((_time-_last_time)<limit)
               {
                  if((_time-_last_time)>-_durations[DUR_AVG-1] && _durations[DUR_AVG-1]<0)
                  {
                    temp = (_time-_last_time)*-1;
                  }
                  else if((_time-_last_time)>_durations[DUR_AVG-1] && _durations[DUR_AVG-1]>0)
                  {

                    temp = (_time-_last_time);

                  }

               }


           }


           for(int i=0;i<(DUR_AVG-1);i++)
             {
               _durations[i]=_durations[i+1];
             }
                _durations[DUR_AVG-1]=temp;

           F32 temp2=0;
            for(int i=0;i<(DUR_AVG);i++)
             {
               temp2+=_durations[i]/F32(DUR_AVG);
             }
           _duration=S32(temp2);
           /* _duration=temp;*/


           F32 scaleD=1.0f;

           if(abs(delta)<jump && abs(delta)>-jump) //scale derivative control down when close to target
           {                                                          //to help bandaid the instability. *** improve this
             scaleD=0.1f;
           }


    F32 scale = _p*0.1f * F32(delta) + _d * F32(10000.0f/_duration)*scaleD;

    const F32 CLAMP = 1.0f;

    if (scale > CLAMP)
    {
        scale = CLAMP;
    }

    if (scale < -CLAMP)
    {
        scale = -CLAMP;
    }

    U32 speed_limit=3000;

    S32 delta_speed = abs(_duration)- speed_limit;

    //F32 p_speed=.1;

   // scale = (scale * p_speed)*F32(delta_speed);



        if (scale > CLAMP)
    {
        scale = CLAMP;
    }

    if (scale < -CLAMP)
    {
        scale = -CLAMP;
    }




    return(scale);
}

U32 Motor::index(void)
{
    U32 a = _adc.sample(ADC::CHANNEL_0);

    U32 b = _adc.sample(ADC::CHANNEL_1);

    U32 index=_fine;

    U32 minimum = 65535;

    for (U32 i = 0; i < NewTABLE_SIZE; i+=3)
    {
        NewEntry &entry = NewTABLE[i];

        S32 da = a - entry.hall_a;

        S32 db = b - entry.hall_b;

       S32 distance = da * da + db * db;

        if (distance < minimum)
        {
            index = entry.index;
            minimum = distance;
        }
    }

    _poserr=minimum;

    return(index);
}

U32 Motor::altIndex(void)
{
    U32 a = _adc.sample(ADC::CHANNEL_0);

    U32 b = _adc.sample(ADC::CHANNEL_1);

    U32 index=999;

    U32 minimum = 0xFFFFFFFF;

    //IndexVal &indexval = TABLEindex[b];

    U32 extraValues = 40;
    U32 center = b;

    if(center<extraValues)
    {
      center = extraValues;
    }

    if(center>(1023-extraValues))
    {
     center = 1023-extraValues;
    }

    U32 lastStart=0xFFFFFFFF;

    for(int j = center-extraValues;j<=center+extraValues;j++)
    {

      IndexVal &indexval = TABLEindex[j];

        U32 start = indexval.position;
        U32 end = indexval.position+indexval.count;

        if(start!=lastStart)
        {
          lastStart=start;

            for (U32 i = start; i < end; i++)
            {
                NewEntry &newentry = NewTABLE[i];

                S32 da = a - newentry.hall_a;

                S32 db = b - newentry.hall_b;

               S32 distance = da * da + db * db;

                if (distance < minimum)
                {
                    index = newentry.index;
                    minimum = distance;
                }
            }
        }

    }

    _poserr=minimum;

    return(index);
}
